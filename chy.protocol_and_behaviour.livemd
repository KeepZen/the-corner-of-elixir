# 协议与行为

## 如何选择

就像 `case` 和 `cond` 一度让我感觉选择困难一样,
协议和行为, 在我开始学习的时候, 也有一样的困难.

但是这种困难和语言无关, 因为它不是语义方面的的问题, 而是系统设计知识不足带来了.

可以这样理解, 协议就是 OOP 编程中的接口 (Java) 或者纯抽象类(C++);
而行为就是一般的抽象类. 至少协议和行为解决的问题与 OOP 中接口与抽象类解决的问题是一样的.

接口和协议可以看作一个系统的 API 接口, 系统的使用者只需要关心系统提供了那些功能,
而不用关心这些功能是如何实现的.

抽象类或行为可以看作是可供 DIY 的产品. 基础的功能行为已经为我们定义好了,
系统各个部分交互的规则也已经完成了, 但是具体的业务需求部分, 需要用户自己 DIY.

如果我们的代码最主要的目的, 是简化系统的调用, 那么应该使用协议及其实现.
如果代码提供的服务, 需要支持定制化的开发, 那么就应该使用协议.

## 协议到底是什么

首先, 在底层协议和协议的实现到底是什么?

Erlang 中根本没有协议这样的语法概念. Elixir 运行在 Erlang 的虚拟机中,
所以 Elixir 是用了 Erlang 中的概念为为我们抽象除了协议这一新概念.

和协议关系最密切的概念就是行为, 就像上一节描述的那样, 这两个概念密切到我不知道如何选择.
现在又知道, 协议是高级的概念, 那么可以肯定, 协议的概念一定构建在行为的基础上.

行为是模块的属性, 是模块发成的声明: 实现了某个模块中所有的 `@callback` 属性.

而一个理想的协议模块, 除了对实现的动态调度的相关函数外, 没有其他函数.
那么协议这个概念本质上, 就是 Elixir 帮助我们更简单的完成对行为的动态调度.

## 协议与模块

在前面的模块的章节中, 我们已经知道了 `defprotocol` 和 `defimpl` 宏的调用,
和 `defmodule` 的调用一样, 在编译后会产生编译模块, 反映到文件系统中就是 `.beam` 文件.
我们还知道, `defmodule` 是支持嵌套定义的, 那么这就意味着, `defprotocol` 和 `defimpl`
除了定义在顶层的作用域外, 还可以嵌套在 `defmodule` 的上下文中.

现在让我们定义一个 `Conrner.Addable` 协议.

```elixir
defmodule Corner do
  defprotocol Addable do
    def add(a, b)
  end

  defimpl Addable, for: [Integer, Float] do
    def add(a, b), do: a + b
  end
end
```

首先, 用 `elixirc` 来编译这段代码, 得到 4 个 `.beam` 文件,
分别是: `Elixir.Corner.beam`,`Elixir.Coner.Addable.beam`,
`Elixir.Coner.Addable.Integer` 和 `Elixir.Corner.Addable.Float`.

也就是说, 如果在模块内使用 `defprotocol`, 那么它的变现类似于 `defmodule`,
最后产生的模块明会添加外部模块前缀. 而协议的实现代码,
实际上是定义在 `Protocol.Type` 这样的模块中的.
而不再添加外部模块的前缀.

例如下面的代码第 5 ~ 10 行,
我们在 `TimeSpan` 模块的定义的上下文中, 为 `TimeSpan` 类型实现 `Coner.Addable` 协议.
这新的实现, 是位于模块 <s>Corner.TimeSpan.</s>Corner.Addable.Corner.TimeSpan 中,
这里没有添加外部模块的前缀 **Corner.TimeSpan**.

也就是说, `defimpl Procol, for: Type` 无论再哪里, 都一样展开为 `Protocol.Type`,
而不会因为嵌套在其他模块结构中, 而添加新的前缀.

```elixir
defmodule Corner.TimeSpan do
  defstruct hour: 0, min: 0, second: 0
  alias Corner.{Addable, TimeSpan}

  defimpl Addable, for: __MODULE__ do
    def add(a, b) do
      %{hour: h1, min: m1, second: s1} = a
      %{hour: h2, min: m2, second: s2} = b
      # %__MODULE__{hour: h1 + h2, min: m1 + m2, second: s1 + s2}
      %TimeSpan{hour: h1 + h2, min: m1 + m2, second: s1 + s2}
    end

    IO.inspect(__MODULE__, lable: "__MODULE__")
  end
end
```

在这种模块嵌套的代码中, 要特别留意上下文. 请注意上面的代码片段中的 `__MODULE__`,
在不同的上下文中, 其展开结果是不一样的.
第 4 行的 `__MODULE__` 展开为 `Corner.TimeSpan` 不出乎我所料.
但是第 12 行的 `__MODULE__` 展开是什么呢? 或者说,
第 8 行的最终的语义和第 9 行一样吗? 通过控制台的输出,
我们知道是第 12 行的 `__MODULE__` 展开为 `Corner.Addable.Corner.TimeSpan`.
因此不难推测, 注释掉的第 8 行, 其语义与第 9 行的是不同的.
虽然上面的讨论已经知道 `defimpl` 是要定义一个新的模块,
但是我第一次编码的时候, 还是犯了第 8 行这样的错.

因为 `defprotocol` `defimpl` 实际上是要创建一个模块,
除了 `defprotocol` 对核心模块的少数几个宏做了限制外[^protocol],
大部分的功能并没有限制, 所以就像我们可以在 `defmodule` 的上下执行
`def*` 以外的其他表达式那样, 在 `defprotocol`, 和 `defimpl` 上下文中也可以这样做.

[^protocol]: 见 Elixir 协议模块源码的 第[690~703](https://github.com/elixir-lang/elixir/blob/7e4fbe657dbf9c3e19e3d2bd6c17cc6d724b4710/lib/elixir/lib/protocol.ex#L684) 行.

现在我们知道了, `defimpl` 可以嵌套到 `defmodule` 中, 那么 `defimpl` 内部可以嵌套 `defimpl` 调用吗?
或者再推广一下: `defimpl` 都可以在什么样的上下文中调用呢?

以前的章节中, 我们见到的 `defimpl` 调用的上下文有:

* 顶层作用域
* `defmodule` 作用域

剩下的作用还有如下几个:

* `defprotoc`
* `defimpl`
* `def`, `defp`, `defmacro` `defmacop`

首先, 不可以直接在 `defprotoc` 的上下文中, 使用 `defimpl` 为正在定义的协议提供实现.

```elixir
defprotocol Addable2 do
  def add(a, b)

  defimpl Addable2, for: Integer do
    def add(a, b) do
      a + b
    end
  end
end
```

编译这段代码, 我们得到了编译错误. 
错误由 `defimpl` 调用引发, 其中提醒的错误信息是不能加载模块 `Addable2`.
这说明, 调用 `defimpl` 的时候, 会加载 `:for` 选项指定的模块.
现在 `Addable2` 模块的定义还没有完成, 加载这个模块自然是失败的.

但是我们可以在协议定义的上下文中, 为其他协议提供实现吗? 答案是可以的.

```elixir
defprotocol Corner.Addable2 do
  def add1(a)

  defimpl Corner.Addable, for: String do
    Kernel.def(add(a, b), do: a <> b)
  end
end
```

但是要注意第 4 行, 这里使用 `Kernel.def` 远程方法调用 `def/2`.
因为其上下文中排除了 `def/2`.

所以虽然可以这样做, 但是绝对不推荐这样做.

**结论**: 在 `defprotcoc` 定义的上下文中, 不能嵌入正在定义的协议的实现.
或者说, 宏调用 `defimpl Protocol,...`, 中的 `Protocol` 对应的模块必须是闭合的.

那么 `defimpl` 可以嵌套自己吗?

```elixir
defimpl Corner.Addable, for: String do
  def add(a, b) do
    a <> b
  end

  defimpl Corner.Addable, for: BitString do
    def add(a, b) do
      a <> b
    end
  end
end
```

**`defimpl` 中可以嵌入 `defimpl`; `defimpl` 在 `defimpl` 的上下文中, 与在顶层的上下文中没有区别**.

这还真的出乎我的意料.

`def` 和 `defp` 是用来在模块中定义函数的. 函数不可以嵌套定义,
所以我预计, 在 `def` 上下文中, 是不可以调用 `defimpl` 的.
但是还是让我们实验一下吧.

```elixir
defmodule EmbedImplToFun do
  def fun() do
    defimpl Addable, for: Tuple do
      def add(a, b) do
        Tuple.concat(a, b)
      end
    end
  end
end
```

又超出了预期了, 居然可以!

那么可以预期, 在 `def` 中也是可以调用 `defmodule`.

Elixir 中不允许命名函数嵌套, 但是知道了上面的知识,
我们就可以让函数返回模块, 然后在模块中定义命名函数,
以这种迂回的方式来实现函数的嵌套.

## 函数中定义模块

上一节, 我们认识到可以在函数中定义模块. 现在让我们实验一下.

```elixir
defmodule EmbedModuleToFun do
  def createFun() do
    defmodule :_ do
      def hello(), do: IO.puts("I am in #{__MODULE__}, hello!")
    end
    |> elem(1)
  end
end

m = EmbedModuleToFun.createFun()
m.hello()
```

这让我想起来 Java 的匿名类. Java 的早期版本中, 不支持匿名函数类型,
所以在当初要在 Java 中模拟函数式编程, 定义高阶函数的时候就不得不使用接口.
使用这些高级函数的时候, 往往就是直接传递一个匿名类.

我们这里使用的方法, 和当年 Java 中使用的方法是一样的.

但是使用这个方法的时候, 还有需要注意的地方.
首先本质上, 这个方法时在运行时动态编译了新模块.
所以每次调用 `createFun()` 都会产生新的模块,
这就意味着: 1) 效率下降, 2) 如果需要在多个函数中返回模块,
必须留意为函数返回的模块取不同的名字, 以防止名称冲突.

我们可以写一个宏来解决这两个问题.

```elixir
defmodule Nest do
  import Kernel, except: [def: 2]

  defmacro def(call, exp) do
    if __CALLER__.function == nil do
      raise "Nest.def must cal in def/2"
    end

    {name, args} = name_and_args(call)
    module_name = String.to_atom("#{__CALLER__.module}.nest_#{name}_#{length(args)}")
    make_module(module_name, call, exp)
  end

  defp name_and_args({:when, _, [{name, _, args}, _]}), do: {name, args}
  defp name_and_args({name, _, args}), do: {name, args}

  defp make_module(module_name, call, exp) do
    quote do
      if :code.is_loaded(unquote(module_name)) do
        unquote(module_name)
      else
        defmodule unquote(module_name) do
          IO.puts("Compile #{unquote(module_name)}")
          def unquote(call), unquote(exp)
        end
        |> elem(1)
      end
    end
  end
end
```

当我们在 LiveBook 中运行下面的测试代码的时候, 如果是第一次运行,
那么第 3 行的的输出之前, 控制台中应该有编译内部模块的输出提示: "Compile Elixir.TestNest.nest_hello_2",
但是第 4 行再次调用 `M.hello()` 的时候, 不再输出模块编译的提示了,
这说明的确不是每次调用 `M.hello()` 都创建新的模块.

但是以后再次运行下面的代码的时候, 因为内部模块已经被加载到模块中了,
所以控制台中, 只会有第 3 行的输出, 而不能再看到内部模块的编译提示.

```elixir
defmodule TestNest do
  require Nest

  def hello() do
    Nest.def(hello(a, b), do: a + b)
  end
end

3 = TestNest.hello().hello(1, 2)
IO.puts("-----------")
3 = TestNest.hello().hello(1, 2)
```

## 协议对函数的限制与辅助

让我们再回到对协议的讨论上来.

协议看起了足够的简单. 看起来它对模块做了限制, 使其上下文中, 只能使用 `def/1` 宏.

但是实际上不是这么简单的.

首先协议对其中的定义函数是有限制的, 协议中的函数, 不可以为零元函数.
所以在 `defprotocol` 上下文中使用的 `def/1` 是从新定义的, 而不是 `Kernel.def/1`.
当我们在协议中定义零元函数的时候, 会引发编译错误.

```elixir
defprotocol ZeroArityFun do
  def sayHi()
end
```

上面我们展示了, `defprotocol` 对 `def/1` 的限制; 
接下来, 我们看一下协议也对函数有辅助:
协议会对其中定义的函数的第一个参数做类型检查.

```elixir
defprotocol Corner.Protocol do
  def sub_one(a)
  def add_one(a)
end

alias Corner.Protocol

defimpl Protocol, for: Integer do
  def sub_one(a) do
    IO.puts("sub_one(i)")
    a - 1
  end

  def add_one(a) do
    a + 1
  end
end

defimpl Protocol, for: Float do
  def sub_one(a) do
    IO.puts("sub_one(f)")
    a - 1
  end

  def add_one(a), do: a + 1
end

defimpl Protocol, for: BitString do
  def sub_one(<<_::utf8, rest::binary>>) do
    rest
  end

  def add_one(a), do: a <> "one"
end

Protocol.sub_one(1)
Protocol.sub_one(1.0)
Protocol.sub_one("Hello")
Protocol.add_one(1) |> IO.inspect(label: "add_one(1)")
Protocol.add_one(1.0) |> IO.inspect(label: "add_one(1.0)")
Protocol.add_one("One + ") |> IO.inspect(label: "add_one(\"One + \")")
```

实际上, 协议对函数的辅助, 只是实现对模块的动态调度的自然结果;
而对函数的限制, 这是实现动态调度的必然要求.

协议实际帮助我们消弭模块名, 来实现函数的动态调度.
但是 Elixir 动态调度只能通过模式匹配来完成.
函数调用的匹配包括一下内容的匹配:

1. 模块名
2. 函数名
3. 参数模式, guard 子句

协议要动态调度是要消除模块之间的差异的, 所以在这里, 模块不能作为动态调度的依据了.
协议的实现中, 函数名都是一样的, 所以它自然也不能用作动态调度的依据.
零元函数, 因为没有参数, 所以最后可以用来区分不同模块的因子也不再有用.
这就是协议上下文中要求 `def/1` 定义的函数, 必须至少含有一个参数的原因.

上面我们看到了, 协议的确做到了对协议实现模块的动态调度. 但是它是如何做到的呢?

## 协议动态调度

Elixir 协议模块文档的[反射章节](https://hexdocs.pm/elixir/Protocol.html#module-reflection),
告诉我们每个协议模块都会包含了以下三个, 用来完成对协议及其实现模块的反射操作的函数:

1. `__protocol__/1` 返回这个协议模块的相关的元信息.
2. `impl_for/1` 返回给定数据的处理模块, 或者返回 `nil`.
3. `impl_for!/1` 和上面的函数类似, 但是如果没有找到对应的实现的话, 会引发异常.

所以通过 `impl_for` 或 `impl_for!` 可以完成动态调用实现模块的功能.
比如我们上面定义的 `Corner.Addable` 协议,
`defprotocol` 为我们生成的模块中, `add/2` 函数就可以非常简单的这样来实现[^generater]:

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Corner.Addable do
  #...
  def add(a,b) do
    m = impl_for!(a)
    m.add(a,b)
  end
end
```

[^generater]: 这是我的猜测, 所以 `defpotocol` 真正产生的代码和这里的代码不一样.

但是 `impl_for` 和 `impl_for!` 又是如何完成它们的工作的呢?

前面我们已经知道, 协议的实现模块的模块名都是以协议模块的模块名为前缀的.
要完成 `impl_for` 和 `impl_for!` 可以分成两部走:

1. 在运行时获取所有的模块, 并依据模块名筛选出以协议名为前缀的模块. 但是这样找出的模块不能保证就一定是协议的实现.
2. 探测这些找到的模块的元信息, 来确认模块是否的确是协议的实现.

那么第一个关键就是如何在运行时获取系统中的模块呢?
Erlang 的标准库的 `:code` 模块提供了这样两个函数:

1. `all_available/0`
2. `all_loaded/0`

顾名思义, 这两个函数: 第一个用来获取所有的可以加载到系统中的模块;
第二个用来获取所有加载到系统中的模块.

知道了这些知识, 第一步就不难完成了.

接下来我们探索一下, `defprotocl` 和 `defimpl` 如何配合,
以便可以通过模块的元信息来确认某个模块是协议的实现的.

<!-- livebook:{"break_markdown":true} -->


