# 第一章 序言

## 缘起

我喜欢 Elixir, 首先是因为它的务实: 作为一个函数式编程语言,
第一不关心范畴论, 第二不强调 free-point style[^1].
而这些是我以往, 以其他语言为工具, 学习函数时编程的过程中, 遇到的最大障碍.

范畴论固然让我迷惘, 我总是记不得各种函子到底有什么对应的函数可以使用, 
这我还可以归结为自己自己没有用心记取这些概念; 但更让我沮丧的是 free-point style.

[^1]: Free-point Style 是说通过组合新函数, 不涉及到函数参数的情况下, 完成新函数的定义.

free-point style 让我感觉惊艳, 我从来没想过代码可以这样的若合符节.
这样的代码, 在我的智力理解的范围内, 总是感觉自己可以完成这样的工作, 
感觉使用这样的编码方式应该让我很容易进入心流.

但现实是,自己写的代码, 基本上做不到 free-point. 
因为在我写函数的时候, 不能预期使用者会如何调用我的代码.
所以当我试图让自己的写的函数也可以做到 free-point 的时候,
非但没有体会到心流, 反而收获的沮丧和无力.
答案就在哪里, 似乎就在眼前, 已经看到它的脚步, 甚至嗅到了它的味道,
但是就是不能把它抓住.
因此, 我总是怀疑自己理解和掌握不了函数式编程.

学习Elixir, 让我感觉不到那么多的压力. 大部分时间, 感觉不到自己在函数式编程.
但是使用 Elixir 的时候, 我也遇到了很多困惑的地方, 
有些是因为函数式编程的限制, 有些是 Elxiir 语言设计的原因.
所以这本书, 首先是写给我自己的, 是我自己使用 Elixir 的时候的心智适调笔记.

所以本书不是一本教如何编程的书籍, 而是如何适应 Elixir 的书籍. 
是 Elxiir 中如何做的书. 有些编程的任务, 使用非函数的式的语言, 处理的时候,
非常的直接, 但是在使用 Elixir 的时候, 却需要仔细的思维如何来做, 
写这本书, 就是希望它能帮助我, 让我打通自己的神经通路, 使用 Elixiir 的时候, 
可以条件反射似的知道使用什么样的方案来解决问题.
当然, 也希望这样一个笔记性质的书, 可以帮助到我的读者.

因为是笔记性, 所以不能保证面面俱到; 因为是我自己的探索, 也不能保证最优的方案. 
所以欢迎大家批评和指正.
