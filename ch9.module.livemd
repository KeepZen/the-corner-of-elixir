# 模块

## 模块概念

在 Elixir 中, 说到模块的时候, 可以指以下三个相关的概念:

1. `defmodule` 这个宏
2. `Module` 这个 Elixir 模块
3. 源码编译后的 `.beam` 文件

这三个概念当然是相互联系的, 但是又是三个不同的实体.

`.beam` 是最后 Erlang 运行环境用来加载的单位模块, 
 当我们要讨论虚拟机如何使用模块的时候, 我们值得往往是这个意义上的模块.

`Module` 是 Elixir 标准库中提供的一个模块,
 它提供了一些列函数, 可以用来帮助我们更好的定义自己的模块.

`defmodule` 是一个宏, 用来定义模块. 可以认为对 `defmodule` 宏的调用,
就是要求 Elixir 编译器把传递给这个宏的参数, 转化为 Erlang模块 (`.beam` 字节码).

这里我使用 *`defmodule` 上下文* 或 *函数定义时*,
表示在 `defmodule Name, do: ...` 中 `...` 代码的情形.

而 *模块中/内*, 表示对 `.beam` 文件结构或其加载后, 在内存中分布方式的讨论.

## 模块属性

Erlang 中, 模块和 `.beam` 文件之间的关系是非常的明确的.
模块这个概念, 在源码层面对应的就是一个 Erlang 源文件(.erl),
而在字节码层面, 对应的就是一个 `.beam` 文件.
Erlang 的一个源文件 (.erl) 编译后对应一个 `.beam` 文件.

所以模块的概念, 在 Erlang 中, 集合就可以和代码文件来对换.

而模块的属性的作用在 Erlang 中也非常的清晰, 就是告诉编译器, 
如何来填充 `.beam` 文件的相关段落(chunk)的.

在 Erlang 中, 大部分属性和 `.beam` 段落名之间是有直接对应关系的,
还有一部分, 属性有多个值, 比如 `-callback`, 这些值集合到一起,
放在一个段落中的. 用户自定义的属性, 与 `-vsn` 一起记录到 `attribute` 段落中.

其实不用关心属性是记录在字节码的什么段落中,
只要理解这些内容都是要反应到模块中的, 就能很好的理解 Erlang 中模块属性了.

例如下面的 Erlang 代码

```erlang
-module(hello).
-export([say_hi/1,say_bye/1]).
...
```

不难推测出, `.beam` 文件中, 记录模块名的位置上记录的内容一定就是 `hello`.
而记录模块导出函数的段落中, 一定有 `say_hi` `say_bye` 这样的内容.

对应的 Elixir 代码应该是这样的:

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule :hello do
  def say_hi(a), do: ...
  def say_bye(a), do: ...
end
```

Elixir 中, 源文件和字节码文件之间不在是一一对应, 而且模块属性的内容,
又分散源码的所有地方, 而不是像 Erlang 那样集中到文件的头部了.
所以从 Elixir 代码来理解模块属性, 就不那么直观了.

### 内建属性

| Erlang 预定义的属性示例                  | 意义                                                                                                              | Elixir对应结构                             |
| ------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------- |
| `-module(MODULE_NAME)`                           | 设置模块的名字                                                                                               | `defmodule`                                    |
| `-export(Functions)`                             | 模块中导出函数                                                                                               | `def`                                          |
| `-import(Module,Functions)`                      | 导入其他模块中的函数                                                                                      | `import Module, only: [Functions]`             |
| `-compile(Options)`                              | 模块中指定编译选项                                                                                         | `@compile([options])`                          |
| `-vsn(Vsn)`                                      | 模块版本                                                                                                        | `@vsn("VSN")`                                  |
| `-on_load(Function)`                             | 指定模块加载时调用的函数名                                                                             | `@on_load ...`                                 |
| `-nifs(Functions)`                               | 指定了模块中定义的那些函数, 可能会被作为外部语言接口(NIF)使用 `erlang:load_nif/2` 加载 | TODO                                           |
| `-behaviour(Behaviour)`                          | 指定模块实现了行为(Behaviour).                                                                             | `@behaviour` `@impl`                           |
| `-callback Name(Argument) -> Result.`[^callback] | 定义 Behaveiour 的回调函数                                                                                   | `@callback function_spec`                      |
| `-record(Record, Fields).`                       | 定义记录                                                                                                        | Record 模块中的 `defrecord`                |
| `-include("SomeFile.hrl").`                      | 包含预处理                                                                                                     | `require`                                      |
| `-define(Macro, Replacement).`                   | 定义宏                                                                                                           | `defmacro`, `defmacrop`                        |
| `-file(File,Line)`                               | 修改了预定义的宏 `?File` 和 `?Line` 的值.                                                                | `@file`                                        |
| `-type my_type() :: other_have_defined_type()`   | 类型定义                                                                                                        | `@type my_type() :: other_have_define_type()`  |
| `-spec function(type()) -> return_type()`        | 为 `function` 指定规范                                                                                         | `@spec spec function(type()) -> return_type()` |

Erlang 较老的不支持 `-callback` 模块属性的版本, 通过定义导出函数 `behviour_info/1` 来定义行为.
就像下面的代码这样.

```erlang
-export([behaviour_info/1]).
...
behaviour_info(callback) ->
  [{func1, Arity1},...];
behaviour_info(_) -> undefined.
```

[^callback]: Elixir 被废弃的 `Behaviour` 模块就是为了帮助我们定义自己的 `behaviour_info` 函数.
现在因为 Erlang 支持 `-callback` 模块属性, 所以 Elixir 废弃了 `Behaviour` 模块,
而启用了新的 `@callback` 内置模块属性.

<!-- livebook:{"break_markdown":true} -->

Elixir 的与 Erlang 对应的内建模块属性, 除了 **模块, 函数, 宏,
结构以及记录** 的定义是使用特定的宏外, 其他的模块属性都使用 `@` 的语法.

编程语言中, 以 `@` 作为语法结构的, 除了 Elixir 的模块属性外, 还有别的几种用法,
而且这几种用法在 Elixir 中某种程度上, 也都可以由模块属性来提供.

也就是, 模块属性在 Elixir 中不再只是用来记录字节码的元数据了,
还承担了其他的语法功能, 这就更进一步的加大了, 我对 Elixir 模块和模块属性,
这两个概念的理解的困难

## Elixir 中模块属性承担的语法功能

### Java 注解(Anotation)

Java 中使用注解语法, 为代码添加元数据.
Elixir 中, 以下的模块属性用来完成类似的工作.
`@deprecated`, `@moduledoc`,`@doc`, `@impl`,`@typedoc`.
但是这里的语法稍微不同.
例如下面两个片段都是表面 `parser` 这个函数不在被支持:

```java
@Deprecated
int parser(String str){
  ....
}
```

对应的 Eixir 中的代码是:

<!-- livebook:{"force_markdown":true} -->

```elixir
@deprecated "Use `String.parser/1` replace."
def parser(str) do
  ...
end
```

除了字母大小写的不同外, 需要注意的是, Elixir 的模块属性是必须有对应的属性值的;
Java 的注解一般不需要参数, 因为注解的作用对象就是其后的代码或字段.
Java 的注解只是表明了, 后面的 API 被遗弃了, 之于应该用那个新的 API 来代替,
只能靠文档来补充了. Elixir 中情况不一样, 编译时给出 API 过期的警告后,
立刻就能给出具体的建议. Java 中注解如果要完成这种功能必须使用带有参数的注解才行.

### Python 修饰器

Python 中的修饰器语法, 也就通过高阶函数提供的语法糖, 
来简化函数或方法定义中的重复性的模板内容. 例如下面的代码:

```python
def trace(fun):
  def warper(arg):
    print("call %s(\"%s\")" %(fun.__name__, arg) )
    ret = fun(arg)
    print("get: %s\n"%ret)
    return ret
  return warper

@trace
def hello(a):
  return "Hello, %s" %(a)

@trace
def hi(a):
  return "Hi, %s" %(a)

hw = hello("world")
hi_white = hi("Mr. White")
print(hw)
print(hi_white)
```

其输出为:

> call hello("world")
> get: Hello, world
> 
> call hi("Mr. White")
> get: Hi, Mr. White
> 
> Hello, world
> Hi, Mr. White

Elixir 不支持修饰器. 但是修饰器, 本质上不过是高阶函数生产新函数来代理被修饰的函数.
Elixir 强大的元编程能力, 再借助编译相关的模块属性钩子(Hook): `@before_compile`和 `@on_defination`, 
是可以实现类似 Python 的修饰器. 实际上, 早就有人做到了这一点[^decorator].

[^decorator]: https://github.com/arjan/decorator

<!-- livebook:{"break_markdown":true} -->

首先安装我们需要的库: `decorator`

```elixir
Mix.install(decorator: "~> 1.2")
```

然后定义我们的修饰器:

```elixir
defmodule PrintDecorator do
  use Decorator.Define, print: 0

  def print(body, context) do
    quote do
      IO.puts("Function called: " <> Atom.to_string(unquote(context.name)))
      unquote(body)
    end
  end
end
```

上面代码定义了修饰符函数 `print`.
当其他函数被 `print` 修饰后, 再调用被修饰后的函数, 
函数的返回结果和修饰前没什么不一样,
但是在函数返回结果之前, 会首先打印出 "Function called: <fun_name>" 这样的文本.

现在让我们看看如何使用修饰符函数 `print` 来修饰其他的函数.

```elixir
defmodule DecoratorUseModule do
  use PrintDecorator

  @decorate print()
  def square(a) do
    a * a
  end
end

alias DecoratorUseModule, as: DUM
4 = DUM.square(2)
```

执行上面的代码, 我们看到控制台中输出了 `Function called: square`,
而且调用被修饰后的 `square` 并没有改变修饰前函数的值.

<!-- livebook:{"break_markdown":true} -->

### Ruby 的对象的属性

Elixir 的模块属性, 还和 Ruby 中的定义实例属性的语法类似.
Ruby 中, 用 `@age` 这样的语法来定义实例的属性的.
Elixir 大量的语法形式是借鉴自 Ruby 的,
所以一度我也为这两个概念的联系和区别而困惑.

我认为 Elixir 的这个语法设计是故意的. 
和 Erlang 中自定义属性不一样, Elixir 中的自定义模块属性,
除了可以作为模块的元数据来使用外, 还有更加实用的功能.

1. 在编译时, 可以作为在元编程的临时结果的存储所;
2. 作为模块内的常量.

例如, 在上面我们用的 `decorator` 库中,
当编译回调钩子执行 `on_defination/6` 后,
在被修饰的函数所在的模块被添加了 `:decorated` 属性[^on_defination].
在模块被编译器之前, `before_compile/2` 宏被调用,
在这个宏执行的过程, 读取模块的属性 `:decorated` 的值后,
就把这个属性从模块中删除了[^before_compile].
所以要这样做, 是因为 `:decorated` 记录的内容需要被进一步的处理,
而不应作为模块的元信息记录到字节码中.

[^on_defination]: 见源码[第 20 行](https://github.com/arjan/decorator/blob/a32053ae884014320940d2a8cefe55181203db93/lib/decorator/decorate.ex#L20)
[^before_compile]: 见源码[第37, 38行](https://github.com/arjan/decorator/blob/a32053ae884014320940d2a8cefe55181203db93/lib/decorator/decorate.ex#L37)

最后的一个问题就是, 为什么不可以使用模块作用域的变量来做中转呢?
这是因为 Elixir 作为一个函数式编程语言, 变量的值是不变的.
这样作用域嵌套形成的闭包, 因为变量值的不可变, 使得内部作用域和外部作用域不会相互影响.

对内部的作用域来说, 它访问的自由变量的值永远都是同一个值,
内部作用域不用担心, 因自由变量值的改变, 而破坏了内部作用域的逻辑前提.

对外部作用域来说, 内部作用域, 虽然可以定义同名变量来覆盖外部的变量,
但是在内部作用域中, 无论如何对变量重新绑定值,
都是对内部作用域的同名的新变量的操作, 而绝对不会改变外部作用域中变量的值.
所以外部作用域的代码, 也不用担心代码在运行期间, 内部作用域破坏自己的数据.

函数式编程带来的好处, 不用我在此鼓吹. 但是如此以来,
遇到不同的作用域中的代码需要共享数据的时候, 就比较麻烦了.
模块的属性, 在编译时, 是整个模块中可读可写的, 
所以刚好可以用来保存编译钩子 (Hook) 执行中产生的副作用.

Elixir 的模块属性和 Ruby 的对象属性, 除了语法上的相似外, 
其相联系之处还在于它们都是属性, 都是可以用来表示相应的概念的状态;
而区别在于, 它们表征的实例的生命周期不一样.

Elixir 的模块属性, 活跃于编译时, 如果没有特殊设置的话, 编译结束后,
其生命也就结束了.

通过特殊的设置, 把属性值作为模块的元数据保存到字节码中,
那么这些数据, 将伴随着模块的存在而存在的. 但是在模块运行的期间,
这些模块的元数据是恒常不变的. 无变化, 也就无所谓生死了.

因此, 我认为, Elixir 的模块属性, 如果说有生命周期的话,
它的生命周期是模块编译期间.

而 Ruby 的实例属性, 存活于运行时, 贯穿与实例的生命周期内.

Ruby 中用类属性来表示整个类都共享的数据, 其使用的语法为 `@@classAttr`.
Ruby 中可以用类属性来完成数据复用.

Elixir 模块内是不支持常量定义的, 模块属性可以用来充当模块内的常量,
以完成数据复用的工作.

假如我们要定义一个数学相关的模块, 其中涉及到角度于弧度的转化,
那么我们可以这样来写:

```elixir
defmodule Angle do
  @pi 3.14
  def convert({:degrate, v}) do
    @pi / 180 * v
  end

  def convert({:radian, v}) do
    180 / @pi * v
  end
end
```

上面的代码中, 多个地方用到了常量 $\pi$, 如果不提供数据复用的方法,
$\pi$ 常量的字面量将散落于系统的各个角落. 
当提高计算的精度提高, 需要使用更精确的 $\pi$ 值时,
同时修改散落再各处的字面量, 就会是一个易错且痛苦且过程.

像上面的代码中那样, 用模块属性做编译时常量, 
更新 $\pi$ 常量的值, 我们只需要修改一行代码就可以完成工作.

## 持久化属性值

模块属性在编程中, 最常用的语法功能, 就是上面小结中介绍: 1) 用来保存临时的状态信息, 2) 作为运行时常量.
但是, 持久化到字节码中的模块属性值, 不只是可以用来做模块的元数据,
也可以有其他用途[^attr], 所以有必要学习如何把模块属性持久化到字节码中.

`Module` 模块中为我们提供了相应的 API:
`Module.register_attribute(module, attribute, options)`
当我们不使用这个函数, 而直接在 `defmodule` 上下文中, 使用 `@attr` 来定义模块属性的时候,
默认的 `options` 是 `[accumulate: flase, persist: false]`.
也就是说, `@attr` 的值默认是单值, 且不持续化的.

如果我们想要持续化, 那么必须在使用 `@attr` 之前, 先调用 `Module.register_attribute/3)`.

还是让我们用代码来探索吧:

[^attr]: 持久化属性值在编程中的使用, 见后面的[冷知识章节](./ch.clod_knowdage.livemd).

```elixir
defmodule Corner.ModuleAttr do
  @x 1
  @x 2
  IO.inspect(@x, label: "@x")
  Module.register_attribute(__MODULE__, :y, persist: true)
  @y 1
  @y 2
  IO.inspect(@y, label: "@y")
  Module.register_attribute(__MODULE__, :z, accumulate: true)
  @z 1
  @z 2
  IO.inspect(@z, label: "@z")

  Module.register_attribute(__MODULE__, :i, accumulate: true, persist: true)
  @i [1, 2]
  IO.inspect(@i, label: "@i")
  @i 2
  IO.inspect(@i, label: "@i")
end

Corner.ModuleAttr.module_info(:attributes) |> IO.inspect(label: "attrs")
```

`persist: true` 可以把属性持久化到模块属性中;
`accumulate: true` 使得属性的值可以累积. 
上面的代码在控制台中的输出为:

> @x: 2  
> @y: 2  
> @z: [2, 1]  
> @i: [[1, 2]]  
> @i: [2, [1, 2]]  
> attrs: [vsn: [178793915849767856111007519148929511895], y: [2], i: [1, 2], i: [2]]

当属性值累计时, 在编译过程中, 属性值记录于一个列表中, 每次对属性赋值, 都是向列表头部添加新值.

但是持久化的时候, 像上面的输出中, 最后一行显示的那样:

1. 所有需要持久化的属性值都被记录为列表,
2. 每次赋值都当作列表中的一项, 被单独记录, 而不是合并相同属性名后记录.

## 模块中的内容

以前的章节中, 我们知道 `defmodle` 上下文中, 除了 `def*` 系列宏之外, 还可以使用其他语法结构.
函数必须定义在模块中, 这是来自 Erlang 的规定, 所以 `def` `defp` 只能在模块中使用,
非常容易理解. 但是为什么结构, 记录, 异常这些定义也必须在模块中呢?
`defstruct`, `defexpect` 以及 `defrecord` 这些宏到底做了什么呢?

在 `defstruct` 文档中[^defstruct], 就讲到 `defstruct` 还在模块中定义了 `__struct__/0` 函数.
正是因为 `defstruct` 被调用的时候, 会向被调用者的上下文中注入函数,
所以 `defstruct` 被调用的上下文就只能被限制为在模块内了.

[^defstruct]: 见[Kernel 模块文档 destruct/1 相关内容](https://hexdocs.pm/elixir/1.13.4/Kernel.html#defstruct/1)

和 `defstruct` 类似, 但是在 Elixir 中很少使用还有宏  `defrecord`.
这个宏做的工作与 `defstruct` 非常类似, 只是他们选用的表示数据的容器类型不同.
`defstruct` 选 map 作为组合数据的基础; 而 `defrecord` 以元组为基础.
这是他们之间的不同.
其相同点在于这两个宏被调用的时候, 都要向调用它的上下文中注入函数.
所以 `defrecord` 也必然的就被限制在了模块中了.

`defexpect` 所以被限制在模块内, 原因更容易理解. 因为它是基于 `defstruct` 工作的,
或者是它是特化的 `defstruct`; `defstruct` 都被限制在模块内,
`defexpect` 都被限制也就顺利成章了.

## 协议和行为

上一节, 我们讨论了为什么有些宏, 被限制只能在模块中使用.
在上面的讨论中, 有意无意的, 认定了 Elixir 中,
只有 `defmodule` 这个宏可以被编译器编译为字节码文件.

但是这种认识是错误的. `defprotocol` 和 `defimple` 宏的调用结果,
也一样是产生 `.beam` 文件的.

Elixir 在这里的处理和 Java 中的处理非常的类似.
我们可以用下表来做个比较.

| 对应项                 | Java                                   | Elixir                              |
| ------------------------- | -------------------------------------- | ----------------------------------- |
| 字节码后缀           | `.class`                               | `.beam`                             |
| 最常用的编译单元  | 类定义                              | 模块定义                        |
| 嵌套处理              | 类定义可以嵌套, 字节码平铺 | 模块可以嵌套, 字节码平铺 |
| API                       | 接口(Interface)                      | 协议(Protocol)                    |
| API 的实现             | 匿名类                              | 协议实现                        |
| API 复用代码的机制 | 抽象类                              | 行为                              |

在 Java 语言中, 类和接口的定义都内会能编译为 `.class`文件.
在 Elixir 中模块定义和协议定义也都要产生对应的字节码文件.

在上表中, 我把 Elixir 中的行为和 Java 中的抽象类做对比,
因为它们都是为了在定义 API 的时候最大化的复用代码,
这是从语言外部对比来看.

如果从 Elixir 语言内部来看, 协议实际上是以行为 (Behaviour) 为基础,
抽象出的模块动态调度的通用方法.

有关协议与行为的更多讨论, 见后面的[&Lt;协议与行为&Gt;](./ch10.protocol_and_behaviour.livemd)章节.
