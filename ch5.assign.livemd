# 赋值

## 赋值与思维流

确切的说, `=` 叫做匹配操作符, 而不是赋值表达式. 
但是变量可以匹配任意的值, 所以实际上, elixir 中还是用 `=` 来做赋值的操作.

在其他编程语言中, 赋值是一个非常简单的操作, 因为赋值语句非常简短,
基本上一眼就能看清楚赋值的结果是什么.

其他语言中, 块语句不是表达式, 但是在 elixir 中语句块也是表达式. 
当赋值语句的右侧出现的是语句块的时候, 代码序列往往和我的思维序列不协调.

首先让我来描述一下, 我阅读这样代码时的思维过程.
因为是一个块语句, 也就是说右多个步骤, 多个操作才能完成最后的结果,
阅读代码的时候, 思维自然要跟随代码, 以理解代码的意图. 
当多个步骤执行完成后, 在我的思维中, 往往忘记了 `=` 的左边的表达式
是什么了, 因为最后结果和变量之间的距离太远了, 这个距离既是物理上的, 
也是心理上的.

而写一个块语句的时候, 在完成整个功能之前, 实际上我也不知道最后的结果会是什么,
甚至不知道, 这个块语句就是函数最后的结果, 还是只是计算的中间过程.
所以基本上, 我也是先完成快语句然后再决定是否需要把结果赋值给一个变量的.
当我意识到需要把块语句的结果赋值给一个变量的时候, 
这时候光标往往是停留在块语句的尾部的, 要完成赋值语法, 只好移动光标, 
这让我有些烦恼.

我更希望写出的代码能和思维流一致, 这样写代码的时候流畅, 阅读的时候也更轻松.

## 设计赋值语句

Elixir 支持宏编程, 这就给我们提供了设计自己的赋值语句提供了可能.
但是 `=` 是一个特殊形式, 所以不能从新定义它, 而只能利用 `=` 
提供的功能, 来重新设计新的语法糖.

首先让我来描述清楚, 我想要的语法是什么样的.

<!-- livebook:{"force_markdown":true} -->

```elixir
if exprestion do
  :zero
else
  :is_not_zero
end
|> assign(to: v)
```

这样简单的, 可以使用 Elixir 提供的语法直接转化成为一行的代码:
 `v = if exprestion, do: :zero, else: :is_not_zero`.
这个时候使用 `assign/2` 是没有必要的. 但是当 `if` 语句不能转化成一行的代码时候,
或者当需要把 `case` 或 `cond` 结果赋值为一个变量的时候, 
代码序列和思维流之间的阻抗就更加的明显了.

假设我们要控制一个机器人, 机器人使用一个 GenServer 表示, 它的状态是 `%{x: x, y: y, diriction: direction}` 表示机器人所在的位置 `x, y` 和面对的方向
(`:E`, 东方; `:W`, 西方;`:N`, 北方; `:S`, 南方).
当机器人接受到转弯的指令后, 就会按照指令转弯, 从而改变自己的状态.
那么处理右转的代码就是这样:

<!-- livebook:{"force_markdown":true} -->

```elixir
def handler_cast({:trun, :right}, %{direct: direct}=state) do
   direct = case direct do
     :N -> :E
     :E -> :S
     :S -> :W
     :W -> :N
   end

   {:noreply, %{state| direct: dircet}}
end
```

那么在 `assign/2` 的帮助下, 可以把上面的代码重构为:

<!-- livebook:{"force_markdown":true} -->

```elixir
def handler_cast({:trun, :right}, %{direct: direct}=state) do
   case direct do
     :N -> :E
     :E -> :S
     :S -> :W
     :W -> :N
   end
   |> assign(to: direct)

   {:noreply, %{state| direct: dircet}}
end
```

看起来不错吧, 现在让我们来看看, 如何来实现 `assgin/2`.

## 赋值实现

我们需要把 `assgin/2` 定义为一个宏, 这个宏的功能非常的简单, 只是 `=` 的语法糖嘛, 所以可以这样来实现.

```elixir
defmodule Demo do
  defmodule Helpers do
    defmacro assign(value, to: var) do
      quote do
        unquote(var) = unquote(value)
      end
    end
  end
end
```

这个实现, 完成了我们期望的工作.

这里 `assign/2` 并不改变直接使用 `=` 的语义代码的语义.
调用 `assign(value, to: var)`, 
当 var 和 value 不匹配的时候, 依旧会抛出匹配错误,

因为 `assign(value, to: var)` 本质上就是 `var = value`,
所以任意可以作为 `=` 左值的语法都可以作为 `assign` 的 `:to` 的值,
虽然, 我们把这个参数命名为 `var`, 单并不限于变量.
毕竟 `assign/2` 仅仅是语法糖.

这样的语法糖, 让代码更简洁, 美观, 如此而已.

`assgin/2` 现在帮助我们减少了代码的序列和思维流之间的阻抗, 
但是像上面对 `hanlder_cast/2` 的重构那样, 
最后的返回语句不能使用 `|>` 链接起来, 这样的代码序列, 
反映到思维流上, 就是思维流的打断.

如果 `assign/2` 能帮助我们把思维流也接续起来, 那么写 elixir 
代码就更加愉悦了.

能让思维流保持连续的代码, 我认为是这样的:

<!-- livebook:{"force_markdown":true} -->

```elixir
def handler_cast({:trun, :right}, %{direct: direct}=state) do
   case direct do
     :N -> :E
     :E -> :S
     :S -> :W
     :W -> :N
   end
   |> assign(to: direct, do: %{state| direct: direct})
end
```

再假设有现在我们有三个函数, 分别是 `step1/0` `step2/1` 和 `step3`.
`step1` 的结果作为 `step2` 的输入, `step2` 返回 `{:ok,v}|{:error, String.t}`.
`step3` 输入为 `v`.
那么无论是

```elxiir
{:ok, v} = step1()
|> step2()

step3(v)
```

还是:

<!-- livebook:{"force_markdown":true} -->

```elixir
step1()
|> step2()
|> assign(to: {:ok, v})

step3(v)
```

阅读的时候, 思维流都是被打断的.
但如果 `assign/2` 允许我们写下面的代码, 就能让思维流保持连续.

<!-- livebook:{"force_markdown":true} -->

```elixir
step1()
|> step2()
|> assign(to: {:ok, v}, do: v)
|> step3()
```

也就是说, 需要把 `assign(value, to: var)` 变成 `assign(value, to: var, do: expression)`.

这个实现也非常的容易, 当我们完成 `var = value` 的赋值后, 再计算 `expression` 的值可以了.

```elixir
defmodule Demo do
  defmodule Helpers do
    defmacro assign(value, to: var, do: expression) do
      quote do
        unquote(var) = unquote(value)
        unquote(expression)
      end
    end
  end

  defp step1(), do: 1
  defp step2(v), do: {:ok, v + 1}
  defp step3(v), do: IO.inspect(v, label: "in step3 v")
  import Helpers

  def do_work() do
    step1()
    |> step2()
    |> IO.inspect(label: "after setp2")
    |> assign(to: {:ok, v}, do: v)
    |> IO.inspect(label: "after assign/2")
    |> step3()
  end
end

Demo.do_work()
```

在 `assign/2` 的帮助下, 我们写的 Elixir 代码, 几乎也可以叫做到 free-point 了.

## 更多的用处
