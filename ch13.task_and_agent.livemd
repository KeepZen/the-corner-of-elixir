# 第十三章 任务与代理

## 任务

任务(Task) 是一个进程, 他的整个生命周期只执行一个计算, 没有或很少和其他进程交互.

当一个计算中, 有可以并行计算的部分, 那么这些可并行计算的部分, 就可是用任务来完成.

任务和前面的异步编程的 Promise 概念有些相识. 它们都启动新的进程完成工作.

任务的责任更加明确, 进程执行完成后寿命周期就结束了, 在结束自己的生命之前,
任务执行的函数的结果会发送给调用者. 任务进程和调用进程相互监视, 当调用者提前退出后,
任务进程会得到通知, 从而也会退出函数的执行.

Promise 和任务的区别在于, Promise 不知道调用者什么时候需要结果.
所以, 当调用者进程存活的时候, 已经有了计算结果的 Promise 会等待调用者获取计算结果,
或者指示下一步怎么作.

如果调用者进程启动一个 Promise 后, 忘记了取回 Promise 的结果,
Promise 进程永久等待调用者的指示的话, 就会为系统引入系统垃圾,
为了解决这个问题, Promise 会等待若干时间, 获得结果后, 若干时间后, 如果调用者没有取回结果,
也没有指示下一步怎么作, Promise 会自动退出.

还可以从 `await` 函数的角度来看这个模块的不同.

`Task` 是主动把结果发送给调用者进程, `Taske.await/1`
只是检查调用者的邮箱中是否有收到了 `Task` 进程发送的结果.

`Promise.await` 调用者进程向 Promise 进程发送请求, Promise
进程收到请求后把结果发送给调用者, 然后 Promise 进程死亡.
在 `Promise.await` 调用之前, Promise 进程会存活一段时间, 
等待调用者取回结果或者指示下一步的工作. 如果在等待时间
