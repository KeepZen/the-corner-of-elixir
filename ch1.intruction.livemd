# 第一章 序言

## 学习 Elixir 为什么那么难

Elixir 这个语言是非常是非常优秀的. 但是另一方面, 学完 Elixir 的基本语法后, 
却未必有信心可以用 Elixir 来做项目. 我想这应该不是我一个人的感受, 就像知乎上的这个问题
[&Lt;如何系统地学习elixir?&Gt;](https://www.zhihu.com/question/331635817)
所暗示的那样, 我也总觉得学习 Elixir 的时候, 内容琐碎而不成体系.

首先是因为 Elixir 的文档还不够完善. Elixir 这个语言, 背后没有大公司的支持,
现在的官方学习教程也只介绍了这个语言重要的语言概念, 距离作为全面的教程还差很远.
这一点和 Java 的官方教程对比的话就非常的清楚.

其次, 和 Elixir 的血统相关. Elixir 主要从 Erlang 和 Ruby 获自己的设计灵感. 
现在的 Elixir 社区的主要参与者, 大部分也是和这两个社区有交集, 所以 Elixir 社区的文档, 
大量的关于 Erlang 或者 Ruby 的隐形知识包含在文档中, 这进一步的加大了学习 Elixir 的难度.
虽然从语言基因来说, Elixir 是 Erlang 和 Ruby 的孩子, 但它毕竟是一个独立的语言.
很多时候, 我的困惑就是因为我错误的把 Elixir 的特性生硬类比 Erlang 或 Ruby 的特性而产生的.
还有一些是因为错误的识别, 比如本来来自 Ruby 的语法概念, 却错误认作了 Erlang 中的,
或者反过来. 还有些是错误的预期, 比如把有些 Erlang 或 Ruby 的语法, 认为 Elixir 中也是一样.
这些错误, 不是因为知道的少, 而是因为知道的多, 而引发的概念混乱. 这种情况, 
其实在学习别的语言的时候, 多少都会有所表现, 所以在我学习 Elixir 的时候特别明显,
可能是因为我原来学习的语言, 更多的来自同一个语言家族(也就是 C 语言家族), 其中的基因变异比较小.
无论是 Erlang 还是 Ruby, 与 C 语言家族之间的语法的差距都很大. 
Erlang 和 Ruby 之间的差异也非常大, 这就使得学习 Elixir 的时候新概念的密度更大.

再次, Elixir 社区中, 对专业词汇的选择上, 独具风格. 有些是受语言基因的影响, 
比如应用程序, 客户端, 服务器等等概念, 在 Erlang 中所指本来就和其他语言中的不同.
这种不同使得我在阅读相关文档后, 不能第一时间完全吸收其本质.
还有一些不是来源于概念继承, 我把它归结为社区的风格. 
比如 Socket 在 Phoenix 中所指就和其他领域所指不同, 当然这些相对来说容易克服.

最后, 文档不完善, 概念的密集, 概念语汇的独特, 所有这些因素综合在一起, 
结果就是各种概念的相关资料分散在不同的地方. 学习的材料的来源的分散的, 
使得我学习这个语言的相关特性时, 自然就是零散而不是整体的.
这进一步的加剧了, Elixir 的学习不够系统的感觉.

## 本书的缘起

我喜欢 Elixir, 不但因为 OTP 平台提供的程序自愈, 还因为 Elixir 语法的优雅与务实: 
作为一个函数式编程语言, 第一不关心范畴论, 第二不强调 Point-free style[^1].
而这些是我以往以其他语言为工具, 学习函数式编程的过程中, 遇到的最大障碍.

范畴论固然让我迷惘, 我总是记不得各种函子到底有什么对应的函数可以使用, 
这我还可以归结为自己没有用心记取这些概念; 但更让我沮丧的是 Point-free style.

[^1]: Point-free Style 是说通过组合新函数, 不涉及到函数参数的情况下, 完成新函数的定义.

Point-free style 让我感觉惊艳, 我从来没想过代码可以这样的若合符节.
这样的代码, 在我的智力理解的范围内, 总是感觉自己也可以完成这样的工作, 
感觉使用这样的编码方式应该让我很容易进入心流状态.

但现实是, 自己写的代码, 基本上做不到 Point-free. 
因为在我写函数的时候, 不能预期使用者会如何调用我的代码.
所以当我试图让自己的写的函数也可以做到 Point-free 的时候,
非但没有体会到心流, 反而感受的是沮丧和无力.
答案就在哪里, 似乎就在眼前, 已经看到它的脚步, 甚至嗅到了它的味道,
但是就是不能把它抓住.
因此, 我总是怀疑自己理解和掌握不了函数式编程.

学习 Elixir, 让我感觉不到那么多的压力. 大部分时间, 感觉不到自己在函数式编程.
但是使用 Elixir 的时候, 我也遇到了很多困惑的地方, 
有些是因为函数式编程范式的限制, 有些是 Elixir 语言设计的原因, 
或者说是自己对 Elixir 语言的理解的问题.
所以这本书, 首先是写给我自己的, 是我自己使用 Elixir 的时候的心智适调笔记.

因此本书不是一本教如何编程的书籍, 而是在 Elixir 中如何做的书. 
有些编程的任务, 使用非函数的式的语言来处理,
解决方案简单直接, 非常明了. 但是如何把对应的方案迁移到 Elixir,
却需要仔细的思考如何来做.

写这本书, 就是希望它能帮助我, 让我能够对 Elixir 有系统性的把握, 
从而帮助我, 在使用 Elixir 的时候, 可以像使用其他的非函数式编程语言那样,
能条件反射似的意识到应该使用什么样的语法或方案来解决相应的问题. 
或者至少缩短这种思考的时间.

当然, 也希望这样一本笔记性质的书, 可以帮助到您 --- --- 我的读者.

因为本书式笔记性质的, 所以不能保证面面俱到; 因为是我自己的探索, 也不能保证最优的方案. 
所以欢迎大家批评和指正.
